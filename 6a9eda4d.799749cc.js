(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{63:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return s})),t.d(n,"metadata",(function(){return o})),t.d(n,"rightToc",(function(){return l})),t.d(n,"default",(function(){return b}));var a=t(2),r=t(6),i=(t(0),t(75)),s={id:"querying",title:"Query API",sidebar_label:"Query API"},o={unversionedId:"querying",id:"querying",isDocsHomePage:!1,title:"Query API",description:"Loaders",source:"@site/docs/querying.md",permalink:"/Gybson/docs/querying",editUrl:"https://github.com/MattGson/Gybson/docs/docs/querying.md",sidebar_label:"Query API",sidebar:"someSidebar",previous:{title:"Getting started",permalink:"/Gybson/docs/installation"},next:{title:"Filtering",permalink:"/Gybson/docs/where"}},l=[{value:"Loaders",id:"loaders",children:[{value:"loadOne",id:"loadone",children:[]},{value:"loadMany",id:"loadmany",children:[]}]},{value:"findMany",id:"findmany",children:[{value:"where",id:"where",children:[]},{value:"orderBy",id:"orderby",children:[]},{value:"paginate",id:"paginate",children:[]}]},{value:"insert",id:"insert",children:[{value:"insert a single row",id:"insert-a-single-row",children:[]},{value:"insert multiple rows",id:"insert-multiple-rows",children:[]}]},{value:"upsert",id:"upsert",children:[{value:"mergeColumns",id:"mergecolumns",children:[]},{value:"update",id:"update",children:[]},{value:"Upsert multiple rows",id:"upsert-multiple-rows",children:[]},{value:"Upsert with soft-deletes",id:"upsert-with-soft-deletes",children:[]}]},{value:"update",id:"update-1",children:[]},{value:"softDelete",id:"softdelete",children:[]},{value:"delete",id:"delete",children:[]},{value:"transactions",id:"transactions",children:[]},{value:"Manual connection handling",id:"manual-connection-handling",children:[]}],c={rightToc:l};function b(e){var n=e.components,t=Object(r.a)(e,["components"]);return Object(i.b)("wrapper",Object(a.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("h2",{id:"loaders"},"Loaders"),Object(i.b)("p",null,"Loaders are methods for each table that perform super fast ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/graphql/dataloader#batching"}),"batched")," and ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://github.com/graphql/dataloader#batching"}),"cached")," loads on indexed columns.\nThis is designed to minimise performance issues from the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://stackoverflow.com/questions/97197/what-is-the-n1-selects-problem-in-orm-object-relational-mapping"}),"n+1 problem"),"."),Object(i.b)("p",null,"Loaders are the primary way of retrieving data using Gybson."),Object(i.b)("h3",{id:"loadone"},"loadOne"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"loadOne(...)")," returns a single record or null."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"loadOne")," filters by a unique key (often primary key)."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"const user = await gybson.user.loadOne({\n    where: {\n        user_id: 1,\n    },\n});\n// Return type: User | null\n")),Object(i.b)("p",null,"A compound unique key example:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"const posts = await gybson.post.loadOne({\n    where: {\n        tag_id__topic_id: {\n            tag_id: 1,\n            topic_id: 4,\n        },\n    },\n});\n\n// Return type: post | null\n")),Object(i.b)("h3",{id:"loadmany"},"loadMany"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"loadMany(...)")," returns an array of records.\n",Object(i.b)("inlineCode",{parentName:"p"},"loadMany")," filters on non-unique key columns (often foreign keys)."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"const posts = await gybson.post.loadMany({\n    where: {\n        author_id: 1,\n    },\n});\n\n// Return type: posts[]\n")),Object(i.b)("p",null,"An order can be specified:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"const posts = await gybson.post.loadMany({\n    where: {\n        author_id: 1,\n    },\n    orderBy: {\n        first_name: 'asc',\n    },\n});\n\n// Return type: posts[]\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"findmany"},"findMany"),Object(i.b)("p",null,"Similar to ",Object(i.b)("inlineCode",{parentName:"p"},"loadMany"),", ",Object(i.b)("inlineCode",{parentName:"p"},"findMany")," loads many rows from a table. The difference is that ",Object(i.b)("inlineCode",{parentName:"p"},"findMany")," provides a very flexible query API including relation filtering.\nDue to this flexibility, ",Object(i.b)("inlineCode",{parentName:"p"},"findMany")," ",Object(i.b)("strong",{parentName:"p"},"does not")," perform batching or caching."),Object(i.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(i.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"tip")),Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"When building GraphQL APIs, we recommend only using ",Object(i.b)("inlineCode",{parentName:"p"},"findMany")," near the top of your query tree.\nWhen used deeper in the tree you should be wary of performance issues due to the ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"https://stackoverflow.com/questions/97197/what-is-the-n1-selects-problem-in-orm-object-relational-mapping"}),"n+1")," problem."))),Object(i.b)("h3",{id:"where"},"where"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"where")," field is used to specify filters on the rows returned."),Object(i.b)("p",null,"You can filter by any combination of columns and relations.\nFor all filtering options see ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"where"}),"Filtering")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"i.e.")," Find all users where age is not 10 ",Object(i.b)("strong",{parentName:"p"},"and"),' they have a pet with the type "dog".'),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"const users = await gybson.user.findMany({\n    where: {\n        age: {\n            not: 10,\n        },\n        pets: {\n            existsWhere: {\n                type: 'dog',\n            },\n        },\n    },\n});\n")),Object(i.b)("h3",{id:"orderby"},"orderBy"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"orderBy")," field is used to specify the order rows should be returned in."),Object(i.b)("p",null,"You can specify one or more ordering columns as well as the order direction (ascending, descending)"),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"i.e.")," Find all users ordered by first_name and last_name in descending order, age in ascending order."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"const users = await gybson.user.findMany({\n    orderBy: {\n        first_name: 'desc',\n        last_name: 'desc',\n        age: 'asc',\n    },\n});\n")),Object(i.b)("h3",{id:"paginate"},"paginate"),Object(i.b)("p",null,"The ",Object(i.b)("inlineCode",{parentName:"p"},"paginate")," field is used to specify a subset of matching rows to return."),Object(i.b)("p",null,"Both ",Object(i.b)("inlineCode",{parentName:"p"},"offset-limit")," and ",Object(i.b)("inlineCode",{parentName:"p"},"cursor")," pagination is supported."),Object(i.b)("p",null,"When using pagination, you should always specify and ",Object(i.b)("inlineCode",{parentName:"p"},"orderBy")," clause as well."),Object(i.b)("h4",{id:"offset-limit-pagination"},"Offset-limit pagination"),Object(i.b)("p",null,"Returns rows before or after a specific number of rows."),Object(i.b)("p",null,"Offset-limit pagination is simpler than cursor pagination but does not work as well for tables that change often."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"i.e.")," Find the first 4 users in ascending last_name order after row 300."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"const users = await gybson.user.findMany({\n    orderBy: {\n        last_name: 'asc',\n    },\n    paginate: {\n        limit: 4,\n        offset: 300,\n    },\n});\n")),Object(i.b)("h4",{id:"cursor-pagination"},"Cursor pagination"),Object(i.b)("p",null,"Returns rows before or after a specific row. You can use any column (or combination) as your cursor."),Object(i.b)("p",null,"Cursor pagination is generally better than offset-limit as it still works the number of rows in the table can change."),Object(i.b)("div",{className:"admonition admonition-note alert alert--secondary"},Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"14",height:"16",viewBox:"0 0 14 16"}),Object(i.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.3 5.69a.942.942 0 0 1-.28-.7c0-.28.09-.52.28-.7.19-.18.42-.28.7-.28.28 0 .52.09.7.28.18.19.28.42.28.7 0 .28-.09.52-.28.7a1 1 0 0 1-.7.3c-.28 0-.52-.11-.7-.3zM8 7.99c-.02-.25-.11-.48-.31-.69-.2-.19-.42-.3-.69-.31H6c-.27.02-.48.13-.69.31-.2.2-.3.44-.31.69h1v3c.02.27.11.5.31.69.2.2.42.31.69.31h1c.27 0 .48-.11.69-.31.2-.19.3-.42.31-.69H8V7.98v.01zM7 2.3c-3.14 0-5.7 2.54-5.7 5.68 0 3.14 2.56 5.7 5.7 5.7s5.7-2.55 5.7-5.7c0-3.15-2.56-5.69-5.7-5.69v.01zM7 .98c3.86 0 7 3.14 7 7s-3.14 7-7 7-7-3.12-7-7 3.14-7 7-7z"})))),"note")),Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"When using cursor pagination, you should specify the same columns in orderBy as your cursor. If you don't you may get unexpected result sets."))),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"i.e.")," Find the first 4 users in ascending order with a last_name after 'Jones'."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"const users = await gybson.user.findMany({\n    orderBy: {\n        last_name: 'asc',\n    },\n    paginate: {\n        limit: 4,\n        afterCursor: {\n            last_name: 'Jones',\n        },\n    },\n});\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"insert"},"insert"),Object(i.b)("p",null,"Inserts one or more rows into the database. This will automatically apply ",Object(i.b)("em",{parentName:"p"},"DEFAULT")," values for any\ncolumns that are ",Object(i.b)("inlineCode",{parentName:"p"},"undefined"),"."),Object(i.b)("p",null,"Insert returns the id of the first row inserted."),Object(i.b)("h3",{id:"insert-a-single-row"},"insert a single row"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"const user_id = await gybson.user.insert({\n    values: {\n        first_name: 'John',\n        age: 25,\n        last_name: 'Doe',\n    },\n});\n")),Object(i.b)("h3",{id:"insert-multiple-rows"},"insert multiple rows"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"const user_id = await gybson.user.insert({\n    values: [\n        {\n            first_name: 'John',\n            age: 25,\n            last_name: 'Doe',\n        },\n        {\n            first_name: 'Jane',\n            age: 30,\n            last_name: 'Doe',\n        },\n    ],\n});\n")),Object(i.b)("p",null,"You can also choose to skip duplicate rows during a multi-row insert:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"const user_id = await gybson.user.insert({\n    values: [\n        {\n            first_name: 'John',\n            age: 25,\n            last_name: 'Doe',\n        },\n        {\n            first_name: 'Jane',\n            age: 30,\n            last_name: 'Doe',\n        },\n    ],\n    skipDuplicates: true,\n});\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"upsert"},"upsert"),Object(i.b)("p",null,"Inserts multiple row into the database. If a row already exists with the same primary key, the row will be updated."),Object(i.b)("div",{className:"admonition admonition-tip alert alert--success"},Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-heading"}),Object(i.b)("h5",{parentName:"div"},Object(i.b)("span",Object(a.a)({parentName:"h5"},{className:"admonition-icon"}),Object(i.b)("svg",Object(a.a)({parentName:"span"},{xmlns:"http://www.w3.org/2000/svg",width:"12",height:"16",viewBox:"0 0 12 16"}),Object(i.b)("path",Object(a.a)({parentName:"svg"},{fillRule:"evenodd",d:"M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"})))),"tip")),Object(i.b)("div",Object(a.a)({parentName:"div"},{className:"admonition-content"}),Object(i.b)("p",{parentName:"div"},"Upsert is implemented using native SQL functionality:\nON CONFLICT DO in Postgres\nON DUPLICATE KEY UPDATE in MySQL"),Object(i.b)("p",{parentName:"div"},"Because of this, the databases may behave differently with the same query. For instance, MySQL will upsert on any unique constraint conflict.\nPostgreSQL will only conflict on the primary key."))),Object(i.b)("p",null,"In the case of conflicts, you can specify how you want to update the existing row(s):"),Object(i.b)("h3",{id:"mergecolumns"},"mergeColumns"),Object(i.b)("p",null,"will overwrite the values on the existing row with the values of the new row for the selected columns:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"const users = await gybson.user.upsert({\n    values: {\n        first_name: 'John',\n        age: 25,\n        last_name: 'Doe',\n    },\n    mergeColumns: {\n        first_name: true,\n        age: true,\n    },\n});\n")),Object(i.b)("p",null,"Will update only the ",Object(i.b)("inlineCode",{parentName:"p"},"first_name")," and ",Object(i.b)("inlineCode",{parentName:"p"},"age")," values if the row already exists."),Object(i.b)("h3",{id:"update"},"update"),Object(i.b)("p",null,"will update existing rows with the specifed values:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"const users = await gybson.user.upsert({\n    values: {\n        id: 12,\n        first_name: 'John',\n        age: 25,\n        last_name: 'Doe',\n    },\n    update: {\n        first_name: 'John 2',\n    },\n});\n")),Object(i.b)("p",null,"Will set the users first_name to ",Object(i.b)("inlineCode",{parentName:"p"},"John 2")," if they already exist."),Object(i.b)("h3",{id:"upsert-multiple-rows"},"Upsert multiple rows"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"const users = await gybson.user.upsert({\n    values: [\n        {\n            first_name: 'John',\n            age: 25,\n            last_name: 'Doe',\n        },\n        {\n            first_name: 'Jane',\n            age: 30,\n            last_name: 'Doe',\n        },\n    ],\n    mergeColumns: {\n        age: true,\n    },\n});\n")),Object(i.b)("h3",{id:"upsert-with-soft-deletes"},"Upsert with soft-deletes"),Object(i.b)("p",null,"You can also specify whether to reinstate (remove soft delete) on a row that has previously been soft-deleted:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"const users = await gybson.user.upsert({\n    values: {\n        first_name: 'John',\n        age: 25,\n        last_name: 'Doe',\n    },\n    mergeColumns: {\n        age: true,\n    },\n    reinstateSoftDelete: true,\n});\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"update-1"},"update"),Object(i.b)("p",null,"Updates all rows that match a filter."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"update")," supports all ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"where"}),"where")," filter options."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"await gybson.user.update({\n    values: {\n        first_name: 'Joe',\n        age: 25,\n    },\n    where: {\n        user_id: {\n            not: 5,\n        },\n    },\n});\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"softdelete"},"softDelete"),Object(i.b)("p",null,"A soft-delete allows you to treat a row as deleted while maintaining it for record-keeping or recovery purposes."),Object(i.b)("p",null,"By default any tables with a column ",Object(i.b)("inlineCode",{parentName:"p"},"deleted")," or ",Object(i.b)("inlineCode",{parentName:"p"},"deleted_at")," support soft deletes."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"softDelete")," will set the ",Object(i.b)("inlineCode",{parentName:"p"},"deleted")," column to true or the current timestamp and cause the row to be filtered from future queries."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"softDelete")," supports all ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"where"}),"where")," filter options."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"await gybson.user.softDelete({\n    where: {\n        user_id: {\n            not: 5,\n        },\n    },\n});\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"delete"},"delete"),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"delete")," will delete a row permanently."),Object(i.b)("p",null,Object(i.b)("inlineCode",{parentName:"p"},"delete")," supports all ",Object(i.b)("a",Object(a.a)({parentName:"p"},{href:"where"}),"where")," filter options."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"await gybson.user.delete({\n    where: {\n        user_id: {\n            not: 5,\n        },\n    },\n});\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"transactions"},"transactions"),Object(i.b)("p",null,"Use ",Object(i.b)("inlineCode",{parentName:"p"},"_transactions")," to run a set of queries as a single atomic query. This means if any\nof the queries fail then none of the changes will be committed."),Object(i.b)("p",null,"You can include a query in the transaction by passing in the ",Object(i.b)("inlineCode",{parentName:"p"},"connection")," argument."),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"const newUserId = await gybson._transaction(async (connection) => {\n    const users = await gybson.user.softDelete({\n        connection,\n        where: {\n            user_id: 1,\n        },\n    });\n    const id = await gybson.user.insert({\n        connection,\n        values: { first_name: 'Steve' },\n    });\n    return id;\n});\n")),Object(i.b)("hr",null),Object(i.b)("h2",{id:"manual-connection-handling"},"Manual connection handling"),Object(i.b)("p",null,"Most query functions allow an optional ",Object(i.b)("inlineCode",{parentName:"p"},"connection")," argument. You can pass a MySQL or PostgreSQL connection\nand the query will use it instead of the internal Knex connection."),Object(i.b)("p",null,"This can be useful for apps with existing connection handling or more complex transaction handling requirements."),Object(i.b)("p",null,"Example with MySQL:"),Object(i.b)("pre",null,Object(i.b)("code",Object(a.a)({parentName:"pre"},{className:"language-typescript"}),"import mysql from 'promise-mysql';\n\nconst connection = mysql.getPoolConnection();\n\nreturn await gybson.user.insert({\n    connection\n    values: { first_name: 'Steve' },\n});\n\nawait connection.close();\n")))}b.isMDXComponent=!0},75:function(e,n,t){"use strict";t.d(n,"a",(function(){return p})),t.d(n,"b",(function(){return m}));var a=t(0),r=t.n(a);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function s(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?s(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):s(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},i=Object.keys(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(a=0;a<i.length;a++)t=i[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var c=r.a.createContext({}),b=function(e){var n=r.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},p=function(e){var n=b(e.components);return r.a.createElement(c.Provider,{value:n},e.children)},u={inlineCode:"code",wrapper:function(e){var n=e.children;return r.a.createElement(r.a.Fragment,{},n)}},d=r.a.forwardRef((function(e,n){var t=e.components,a=e.mdxType,i=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),p=b(t),d=a,m=p["".concat(s,".").concat(d)]||p[d]||u[d]||i;return t?r.a.createElement(m,o(o({ref:n},c),{},{components:t})):r.a.createElement(m,o({ref:n},c))}));function m(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var i=t.length,s=new Array(i);s[0]=d;var o={};for(var l in n)hasOwnProperty.call(n,l)&&(o[l]=n[l]);o.originalType=e,o.mdxType="string"==typeof e?e:a,s[1]=o;for(var c=2;c<i;c++)s[c]=t[c];return r.a.createElement.apply(null,s)}return r.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);
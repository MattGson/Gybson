"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.TypeBuilder = void 0;
const Schemats_1 = require("../Schemats");
class TypeBuilder {
    constructor(connectionString, tables) {
        this.tables = tables;
        this.connectionString = connectionString;
    }
    generateRowTypes() {
        return __awaiter(this, void 0, void 0, function* () {
            const contents = yield Schemats_1.typescriptOfSchema(this.connectionString, this.tables, null, {
                writeHeader: false,
                camelCase: false,
            });
            const result = `
        /* Auto generated by TypeBuilder.ts DO NOT MODIFY */
        
        /* eslint @typescript-eslint/no-namespace: 0 */
        /* eslint  @typescript-eslint/class-name-casing: 0 */
        
        ${contents}
        `;
            // TODO:- bit of a hack to remove reserved type 'symbol' for now
            return result.replace('type symbol = string | null;', '').replace('symbol: unitsFields.symbol;', '');
        });
    }
    generateTableTypes() {
        return __awaiter(this, void 0, void 0, function* () {
            const tableRows = this.tables.reduce((result, tbl) => {
                // return result.concat(`${_.camelCase(tbl)}: dbt.${_.upperFirst(_.camelCase(tbl))};`);
                return result.concat(`${tbl}: dbt.${tbl};`);
            }, []);
            // write tables
            return `
      /* Auto generated by TypeBuilder.ts DO NOT MODIFY */
      /* eslint @typescript-eslint/no-namespace: 0 */
      /* eslint  @typescript-eslint/class-name-casing: 0 */

      import * as dbt from './db-schema';

      export interface DBTables {
        ${tableRows.join('\n')}
      }

      export type DBTableName = Extract<keyof DBTables, string>;
    `;
        });
    }
}
exports.TypeBuilder = TypeBuilder;
//# sourceMappingURL=TypeBuilder.js.map
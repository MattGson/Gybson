"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.generate = void 0;
const path_1 = __importDefault(require("path"));
// @ts-ignore
const prettier_1 = require("prettier");
const fs_extra_1 = __importDefault(require("fs-extra"));
const config_1 = require("./config");
const knex_1 = __importDefault(require("knex"));
const MySQLIntrospection_1 = require("./Introspection/MySQLIntrospection");
const TableClientBuilder_1 = require("./TableClientBuilder");
// **************************
// setup
// **************************
// const OUT_DIR = process.argv[2];
// const CURRENT = process.cwd();
//
// // const ENT_DIR = path.join(__dirname, '..', '..', 'lib', 'Ent');
// // const ENT_DIR = path.join(CURRENT, OUT_DIR);
// // const GENERATED_DIR = path.join(CURRENT, '..', '..', 'Client', 'Gen');
// const GENERATED_DIR_CLIENTS = path.join(CURRENT, 'src', 'Gen');
//
// const knex = Knex({
//     client: 'mysql',
//     connection: mysql,
// });
/**
 * Write to a typescript file
 * @param content
 * @param directory
 * @param filename
 */
function writeTypescriptFile(content, directory, filename) {
    return __awaiter(this, void 0, void 0, function* () {
        const fileHeader = `
         /* Auto generated by Nodent on ${Date.now().toLocaleString()} - DO NOT MODIFY */
        
        /* eslint @typescript-eslint/no-namespace: 0 */
        /* eslint  @typescript-eslint/class-name-casing: 0 */
    `;
        // append creates files if they don't exist - write overwrites contents
        yield fs_extra_1.default.appendFile(path_1.default.join(directory, filename), '');
        yield fs_extra_1.default.writeFile(path_1.default.join(directory, filename), prettier_1.format(fileHeader + content, Object.assign({ parser: 'typescript' }, config_1.prettier)));
    });
}
// **************************
// generate types
// **************************
// function dbConnectionString(): string {
//     const { database, user, password, port, host } = my;
//     return `mysql://${user}:${password}@${host}:${port}/${database}`;
// }
function generateTypes(db, _outdir) {
    return __awaiter(this, void 0, void 0, function* () {
        // const DB = new MySQLIntrospection(knex, mysql.database);
        const tables = yield db.getSchemaTables();
        console.log(tables);
        //
        // const typeBuilder = new TypeBuilder(dbConnectionString(), tables);
        //
        // // write index
        // await fs.writeFile(
        //     path.join(GENERATED_DIR, 'index.ts'),
        //     format(
        //         `
        //            import * as DBRowTypes from './db-schema';
        //            import { DBTables, DBTableName } from './db-tables';
        //            export { DBRowTypes, DBTableName, DBTables };
        //     `,
        //         { parser: 'typescript', ...prettier_conf },
        //     ),
        // );
        //
        // const rowTypes = await typeBuilder.generateRowTypes();
        // const tableTypes = await typeBuilder.generateTableTypes();
        //
        // await writeTypescriptFile(rowTypes, GENERATED_DIR, 'db-schema.ts');
        // await writeTypescriptFile(tableTypes, GENERATED_DIR, 'db-tables.ts');
    });
}
// **************************
// generate loaders
// **************************
function generateLoaders(db, outdir) {
    return __awaiter(this, void 0, void 0, function* () {
        // const DB = new MySQLIntrospection(knex, mysql.database);
        console.log(`Reading from: mysql://${config_1.mysql.user}:${config_1.mysql.password}@${config_1.mysql.host}:${config_1.mysql.port}/${config_1.mysql.database}`);
        const builders = [];
        const tables = yield db.getSchemaTables();
        for (let table of tables) {
            const builder = new TableClientBuilder_1.TableClientBuilder(table, config_1.codeGenPreferences);
            builders.push(builder);
            // const OUT_LOADER_PATH = path.join(GENERATED_DIR, `${builder.className}.ts`);
            // const columns = await DB.getTableTypes(table);
            // const hasSoftDelete = columns['deleted'] != null;
            //
            // const tableKeys = keys[table];
            //
            // // filter duplicate columns
            // const uniqueKeys = _.keyBy(tableKeys, 'columnName');
            //
            // Object.values(uniqueKeys).forEach((key: KeyColumn) => {
            //     const { columnName } = key;
            //
            //     const column: ColumnDefinition = columns[columnName];
            //
            //     // for now only accept loaders on string and number column types
            //     if (column.tsType !== 'string' && column.tsType !== 'number') return;
            //
            //     const isMany = CardinalityResolver.isToMany(columnName, tableKeys);
            //     if (!isMany) builder.addByColumnLoader(column, hasSoftDelete);
            //     else builder.addManyByColumnLoader(column, hasSoftDelete);
            // });
            //
            // builder.addFindMany(hasSoftDelete);
            // append creates files if they don't exist - write overwrites contents
            yield writeTypescriptFile(yield builder.build(db), outdir, `${builder.className}.ts`);
        }
        // // build index.ts
        // let imports = ``;
        // let loaders = ``;
        //
        // builders.map((builder) => {
        //     imports += `import ${builder.LoaderName}, { ${builder.RowTypeName} } from './Gen/${builder.EntName}';`;
        //     loaders += `${builder.LoaderName}: new ${builder.LoaderName}(),`;
        // });
        // const entLoaders = `
        //     export const EntLoader = () => {
        //     return {
        //         ${loaders}
        //         }
        //     }
        //     export type EntLoader = ReturnType<typeof EntLoader>;
        // `;
        // await fs.appendFile(path.join(ENT_DIR, 'index.ts'), '');
        // await fs.writeFile(
        //     path.join(ENT_DIR, 'index.ts'),
        //     format(imports + entLoaders, {
        //         parser: 'typescript',
        //         ...prettier_conf,
        //     }),
        // );
        return tables;
    });
}
function generate(conn, outdir) {
    return __awaiter(this, void 0, void 0, function* () {
        const knex = knex_1.default(conn);
        let DB;
        if (conn.client === 'mysql') {
            DB = new MySQLIntrospection_1.MySQLIntrospection(knex, config_1.mysql.database);
        }
        else
            throw new Error('PostgreSQL not currently supported');
        yield generateTypes(DB, outdir);
        yield generateLoaders(DB, outdir);
        yield knex.destroy();
    });
}
exports.generate = generate;
//# sourceMappingURL=index.js.map
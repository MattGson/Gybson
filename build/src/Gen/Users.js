"use strict";
/* Auto generated by Nodent on 7/16/2020 at 1:27:35 PM - DO NOT MODIFY */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
/* eslint @typescript-eslint/no-namespace: 0 */
/* eslint  @typescript-eslint/class-name-casing: 0 */
const DataLoader = require("dataloader");
const Knex = require("knex");
const Client_1 = __importStar(require("../Client"));
const logging_1 = require("../Client/lib/logging");
class Users extends Client_1.SQLQueryBuilder {
    constructor() {
        super('users', 'deleted');
        /* Notice that byColumn loader might return null for some keys */
        this.UsersByUserIdLoader = new DataLoader((ids) => {
            return this.byColumnLoader({ column: 'user_id', keys: ids });
        });
        this.UsersByEmailLoader = new DataLoader((ids) => {
            return this.manyByColumnLoader({ column: 'email', keys: ids, orderBy: ['email'], filterSoftDelete: true });
        });
        this.UsersByEmailVerificationTokenIdLoader = new DataLoader((ids) => {
            return this.manyByColumnLoader({
                column: 'email_verification_token_id',
                keys: ids,
                orderBy: ['email_verification_token_id'],
                filterSoftDelete: true,
            });
        });
    }
    byUserId(user_id, includeDeleted = false) {
        return __awaiter(this, void 0, void 0, function* () {
            const row = yield this.UsersByUserIdLoader.load(user_id);
            if ((row === null || row === void 0 ? void 0 : row.deleted) && !includeDeleted)
                return null;
            return row;
        });
    }
    byEmail(email) {
        return this.UsersByEmailLoader.load(email);
    }
    byEmailVerificationTokenId(email_verification_token_id) {
        return this.UsersByEmailVerificationTokenIdLoader.load(email_verification_token_id);
    }
}
exports.default = Users;
const a = new Users();
Client_1.default.initialize(Knex({ client: 'mysql' }), { logLevel: logging_1.LogLevel.debug });
a.findMany({
    where: {
        user_id: {
            notIn: [4, 5],
            not: 3,
        },
        email: 'gg',
        AND: [
            {
                fname: 'john',
                OR: [{ image_uri: 'dsff' }, { email: 'dsff' }],
            },
            {
                lname: {
                    lt: 'df',
                },
                NOT: [
                    {
                        user_id: 3,
                    },
                    { fname: 'dfd' },
                    { lname: 'gds' },
                ],
            },
        ],
    },
    orderBy: {
        user_id: "asc",
        fname: "desc"
    }
}).then(() => { });
//# sourceMappingURL=Users.js.map
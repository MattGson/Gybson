(window.webpackJsonp=window.webpackJsonp||[]).push([[13],{69:function(e,n,t){"use strict";t.r(n),t.d(n,"frontMatter",(function(){return l})),t.d(n,"metadata",(function(){return s})),t.d(n,"rightToc",(function(){return o})),t.d(n,"default",(function(){return b}));var r=t(2),a=t(6),i=(t(0),t(75)),l={id:"where",title:"Filtering",sidebar_label:"Filtering"},s={unversionedId:"where",id:"where",isDocsHomePage:!1,title:"Filtering",description:"Gybson has a comprehensive type-safe filtering API so that you can access the exact data you need.",source:"@site/docs/where.md",permalink:"/Gybson/docs/where",editUrl:"https://github.com/MattGson/Gybson/docs/docs/where.md",sidebar_label:"Filtering",sidebar:"someSidebar",previous:{title:"Query API",permalink:"/Gybson/docs/querying"},next:{title:"Using with GraphQL",permalink:"/Gybson/docs/graphql"}},o=[{value:"Supported filters",id:"supported-filters",children:[{value:"Conditions",id:"conditions",children:[]},{value:"Gates (combiners)",id:"gates-combiners",children:[]},{value:"Relation filters",id:"relation-filters",children:[]},{value:"Complex filtering example with findMany",id:"complex-filtering-example-with-findmany",children:[]}]},{value:"Generated types",id:"generated-types",children:[{value:"Example schema",id:"example-schema",children:[]},{value:"Types",id:"types",children:[]}]},{value:"Prior art",id:"prior-art",children:[]}],c={rightToc:o};function b(e){var n=e.components,t=Object(a.a)(e,["components"]);return Object(i.b)("wrapper",Object(r.a)({},c,t,{components:n,mdxType:"MDXLayout"}),Object(i.b)("p",null,"Gybson has a comprehensive type-safe filtering API so that you can access the exact data you need."),Object(i.b)("h2",{id:"supported-filters"},"Supported filters"),Object(i.b)("h3",{id:"conditions"},"Conditions"),Object(i.b)("p",null,"Rows can be filtered by a range of conditions. The conditions are slightly different depending on the column type.\nThe supported conditions are:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"equals")," - The column equals the value (the default)"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"not")," - The column does not equal the value"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"in")," - The column is in a list of values"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"notIn")," - The column is not in a list of values"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"lt")," - The column is less than the value"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"lte")," - The column is less or equal to the value"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"gt")," - The column is greater than the value"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"gte")," - The column is greater than or equal to the value")),Object(i.b)("p",null,"String type columns only"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"contains")," - The column is contains the substring"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"startsWith")," - The column is starts with the substring"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"endsWith")," - The column ends with the substring")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"e.g.")," All users named 'Steve' who are more than 20 years old"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),"await gybson.user.findMany({\n    where: {\n        first_name: 'Steve',\n        age: {\n            gt: 20,\n        },\n    },\n});\n")),Object(i.b)("h3",{id:"gates-combiners"},"Gates (combiners)"),Object(i.b)("p",null,"Clauses can be joined using AND, OR and NOT"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"AND")," - All conditions are true (the default)"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"OR")," - At least one condition is true"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"NOT")," - None of the conditions are true")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"e.g.")," All users named 'Steve' who are 20 or 30 years old"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),"await gybson.user.findMany({\n    where: {\n        first_name: 'Steve',\n        OR: [\n            {\n                age: 20,\n            },\n            {\n                age: 30,\n            },\n        ],\n    },\n});\n")),Object(i.b)("h3",{id:"relation-filters"},"Relation filters"),Object(i.b)("p",null,"Related tables can be filtered by different options depending on the relationship cardinality (1-N, N-1, N-N, 1-1)"),Object(i.b)("p",null,"The relation filters available are:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"exists")," - boolean - assert whether there is/is not at least one related row"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"where")," - there is at least one related row that matches the condition"),Object(i.b)("li",{parentName:"ul"},Object(i.b)("inlineCode",{parentName:"li"},"whereEvery")," - every related row matches the condition")),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"e.g.")),Object(i.b)("p",null,"All users who have a post with a rating above 4"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),"await gybson.user.findMany({\n    where: {\n        posts: {\n            where: {\n                rating: {\n                    gt: 4,\n                },\n            },\n        },\n    },\n});\n")),Object(i.b)("p",null,"All users who have not made any posts"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),"await gybson.user.findMany({\n    where: {\n        posts: {\n            exists: false,\n        },\n    },\n});\n")),Object(i.b)("h3",{id:"complex-filtering-example-with-findmany"},"Complex filtering example with findMany"),Object(i.b)("p",null,"Find the first 3 users where:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"The city is 'NY'"),Object(i.b)("li",{parentName:"ul"},"The last name does NOT start with 'P',"),Object(i.b)("li",{parentName:"ul"},"The age is less than 20"),Object(i.b)("li",{parentName:"ul"},"The favourite Pet is either a 'dog' or a 'cat'"),Object(i.b)("li",{parentName:"ul"},"Every pet they own is a dog"),Object(i.b)("li",{parentName:"ul"},"Every dog they own has toy")),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),"const users = await gybson.user.findMany({\n    where: {\n        city: 'NY',\n        NOT: [\n            {\n                last_name: {\n                    startsWith: 'P',\n                },\n            },\n        ],\n        age: {\n            lt: 20,\n        },\n        OR: [\n            {\n                favourite_pet: 'dog',\n            },\n            {\n                favourite_pet: 'cat',\n            },\n        ],\n        pets: {\n            whereEvery: {\n                type: 'dog',\n                toys: {\n                    exists: true,\n                },\n            },\n        },\n    },\n});\n\n// Return type: user[]\n")),Object(i.b)("h2",{id:"generated-types"},"Generated types"),Object(i.b)("p",null,"Types are generated to match the filtering options available."),Object(i.b)("h3",{id:"example-schema"},"Example schema"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-sql"}),"CREATE TABLE users (\n  user_id int(10) unsigned NOT NULL AUTO_INCREMENT,\n  best_friend_id int(10) unsigned DEFAULT NULL,\n  email varchar(400) NOT NULL,\n  name varchar(200) DEFAULT NULL,\n  password varchar(200) NOT NULL,\n  subscription_level enum('BRONZE','SILVER','GOLD') DEFAULT NULL,\n  PRIMARY KEY (user_id),\n  UNIQUE KEY users_email_unique (email),\n  KEY users_best_friend_id_foreign (best_friend_id),\n  CONSTRAINT users_best_friend_id_foreign FOREIGN KEY (best_friend_id) REFERENCES users (user_id)\n)\n\nCREATE TABLE posts (\n  post_id int(10) unsigned NOT NULL AUTO_INCREMENT,\n  author_id int(10) unsigned NOT NULL,\n  message varchar(4000) NOT NULL,\n  created datetime DEFAULT CURRENT_TIMESTAMP,\n  deleted BOOLEAN DEFAULT false,\n  PRIMARY KEY (post_id),\n  KEY posts_author_id_foreign (author_id),\n  CONSTRAINT posts_author_id_foreign FOREIGN KEY (author_id) REFERENCES users (user_id),\n)\n\n")),Object(i.b)("h3",{id:"types"},"Types"),Object(i.b)("p",null,"Here are some examples of the types generated for the above schema:"),Object(i.b)("pre",null,Object(i.b)("code",Object(r.a)({parentName:"pre"},{className:"language-typescript"}),"export interface usersHasOneRelationFilter {\n    exists?: usersWhere;\n    where?: usersWhere;\n}\n\nexport interface usersWhere {\n    user_id?: number | NumberWhere;\n    best_friend_id?: number | NumberWhereNullable | null;\n    email?: string | StringWhere;\n    name?: string | StringWhereNullable | null;\n    password?: string | StringWhere;\n    subscription_level?: users_subscription_level | null;\n\n    AND?: Enumerable<usersWhere>;\n    OR?: Enumerable<usersWhere>;\n    NOT?: Enumerable<usersWhere>;\n\n    best_friend?: usersHasOneRelationFilter | null;\n    author_posts?: postsHasManyRelationFilter | null;\n}\n\nexport interface postsHasManyRelationFilter {\n    exists?: boolen;\n    where?: postsWhere;\n    whereEvery?: postsWhere;\n}\n\nexport interface postsWhere {\n    post_id?: number | NumberWhere;\n    author_id?: number | NumberWhere;\n    message?: string | StringWhere;\n    created?: Date | DateWhereNullable | null;\n    deleted?: boolean | BooleanWhereNullable | null;\n\n    AND?: Enumerable<postsWhere>;\n    OR?: Enumerable<postsWhere>;\n    NOT?: Enumerable<postsWhere>;\n\n    author?: usersHasOneRelationFilter | null;\n}\n")),Object(i.b)("h2",{id:"prior-art"},"Prior art"),Object(i.b)("p",null,"The gybson filtering API was inspired by ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:"https://github.com/prisma/prisma-client-js"}),"Prisma"),". See ",Object(i.b)("a",Object(r.a)({parentName:"p"},{href:""}),"comparisons")," for an in depth comparison."))}b.isMDXComponent=!0},75:function(e,n,t){"use strict";t.d(n,"a",(function(){return u})),t.d(n,"b",(function(){return h}));var r=t(0),a=t.n(r);function i(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function l(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function s(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?l(Object(t),!0).forEach((function(n){i(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):l(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function o(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},i=Object.keys(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(r=0;r<i.length;r++)t=i[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var c=a.a.createContext({}),b=function(e){var n=a.a.useContext(c),t=n;return e&&(t="function"==typeof e?e(n):s(s({},n),e)),t},u=function(e){var n=b(e.components);return a.a.createElement(c.Provider,{value:n},e.children)},p={inlineCode:"code",wrapper:function(e){var n=e.children;return a.a.createElement(a.a.Fragment,{},n)}},d=a.a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,i=e.originalType,l=e.parentName,c=o(e,["components","mdxType","originalType","parentName"]),u=b(t),d=r,h=u["".concat(l,".").concat(d)]||u[d]||p[d]||i;return t?a.a.createElement(h,s(s({ref:n},c),{},{components:t})):a.a.createElement(h,s({ref:n},c))}));function h(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var i=t.length,l=new Array(i);l[0]=d;var s={};for(var o in n)hasOwnProperty.call(n,o)&&(s[o]=n[o]);s.originalType=e,s.mdxType="string"==typeof e?e:r,l[1]=s;for(var c=2;c<i;c++)l[c]=t[c];return a.a.createElement.apply(null,l)}return a.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);
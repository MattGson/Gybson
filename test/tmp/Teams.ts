/* Auto generated by relational-schema (https://github.com/MattGson/relational-schema) --- DO NOT MODIFY */

/* eslint-disable */

import { ClientEngine } from '../../src/query-client';
import * as schema from './relational-schema';
import Knex from 'knex';
import winston from 'winston';

import {
    QueryClient,
    Order,
    Enumerable,
    NumberWhere,
    NumberWhereNullable,
    StringWhere,
    StringWhereNullable,
    BooleanWhere,
    BooleanWhereNullable,
    DateWhere,
    DateWhereNullable,
    Loader,
} from '../../src/query-client';

import { team_memberRelationFilter } from './TeamMembers';

export interface teamDTO {
    team_id: number;
    name: string;
    deleted: boolean | null;
}

export interface teamRequiredRow {
    team_id?: number;
    name: string;
    deleted?: boolean | null;
}

export interface teamColumnMap {
    team_id: boolean;
    name: boolean;
    deleted: boolean;
}

export interface teamRelationFilter {
    existsWhere?: teamWhere;
    notExistsWhere?: teamWhere;
    whereEvery?: teamWhere;
}

export interface teamWhere {
    team_id?: number | NumberWhere;
    name?: string | StringWhere;
    deleted?: boolean | BooleanWhereNullable | null;

    AND?: Enumerable<teamWhere>;
    OR?: Enumerable<teamWhere>;
    NOT?: Enumerable<teamWhere>;

    team_members?: team_memberRelationFilter | null;
}

export interface teamLoadOneWhere {
    team_id?: number;
}

export interface teamLoadManyWhere {
    name?: string;
    deleted?: boolean | null;
}

export type teamOrderBy = {
    team_id?: Order;
    name?: Order;
    deleted?: Order;
};

export interface teamPaginate {
    limit?: number;
    afterCursor?: Partial<teamDTO>;
    beforeCursor?: Partial<teamDTO>;
    offset?: number;
}

export default class Teams extends QueryClient<
    teamDTO,
    teamColumnMap,
    teamWhere,
    teamLoadOneWhere,
    teamLoadManyWhere,
    teamOrderBy,
    teamPaginate,
    teamRequiredRow
> {
    constructor(params: { knex: Knex<any, unknown>; logger: winston.Logger; engine: ClientEngine }) {
        const { knex, logger, engine } = params;
        super({
            tableName: 'teams',
            schema: schema as any,
            knex,
            logger,
            engine,
        });
    }
}

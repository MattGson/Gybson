/* Auto generated by relational-schema (https://github.com/MattGson/relational-schema) --- DO NOT MODIFY */

/* eslint-disable */

import { ClientEngine } from '../../src/query-client';
import schema from './relational-schema';
import Knex from 'knex';
import winston from 'winston';

import {
    QueryClient,
    Order,
    Enumerable,
    NumberWhere,
    NumberWhereNullable,
    StringWhere,
    StringWhereNullable,
    BooleanWhere,
    BooleanWhereNullable,
    DateWhere,
    DateWhereNullable,
    Loader,
} from '../../src/query-client';

import { postRelationFilter } from './Posts';
import { team_memberRelationFilter } from './TeamMembers';

export type permissions = 'ADMIN' | 'USER';
export type subscription_level = 'BRONZE' | 'GOLD' | 'SILVER';

export interface userDTO {
    user_id: number;
    best_friend_id: number | null;
    email: string;
    first_name: string | null;
    last_name: string | null;
    password: string;
    token: string | null;
    permissions: permissions | null;
    subscription_level: subscription_level | null;
    deleted_at: Date | null;
}

export interface userRequiredRow {
    user_id?: number;
    best_friend_id?: number | null;
    email: string;
    first_name?: string | null;
    last_name?: string | null;
    password: string;
    token?: string | null;
    permissions?: permissions | null;
    subscription_level?: subscription_level | null;
    deleted_at?: Date | null;
}

export interface userColumnMap {
    user_id: boolean;
    best_friend_id: boolean;
    email: boolean;
    first_name: boolean;
    last_name: boolean;
    password: boolean;
    token: boolean;
    permissions: boolean;
    subscription_level: boolean;
    deleted_at: boolean;
}

export interface userRelationFilter {
    existsWhere?: userWhere;
    notExistsWhere?: userWhere;
    whereEvery?: userWhere;
}

export interface userWhere {
    user_id?: number | NumberWhere;
    best_friend_id?: number | NumberWhereNullable | null;
    email?: string | StringWhere;
    first_name?: string | StringWhereNullable | null;
    last_name?: string | StringWhereNullable | null;
    password?: string | StringWhere;
    token?: string | StringWhereNullable | null;
    permissions?: permissions | null;
    subscription_level?: subscription_level | null;
    deleted_at?: Date | DateWhereNullable | null;

    AND?: Enumerable<userWhere>;
    OR?: Enumerable<userWhere>;
    NOT?: Enumerable<userWhere>;

    best_friend?: userRelationFilter | null;
    author_posts?: postRelationFilter | null;
    co_author_posts?: postRelationFilter | null;
    team_members?: team_memberRelationFilter | null;
    users?: userRelationFilter | null;
}

export interface userLoadOneWhere {
    email?: string;
    token?: string;
    user_id?: number;
}

export interface userLoadManyWhere {
    best_friend_id?: number | null;
    first_name?: string | null;
    last_name?: string | null;
    password?: string;
    permissions?: permissions | null;
    subscription_level?: subscription_level | null;
    deleted_at?: Date | null;
}

export type userOrderBy = {
    user_id?: Order;
    best_friend_id?: Order;
    email?: Order;
    first_name?: Order;
    last_name?: Order;
    password?: Order;
    token?: Order;
    permissions?: Order;
    subscription_level?: Order;
    deleted_at?: Order;
};

export interface userPaginate {
    limit?: number;
    afterCursor?: Partial<userDTO>;
    beforeCursor?: Partial<userDTO>;
    offset?: number;
}

export default class Users extends QueryClient<
    userDTO,
    userColumnMap,
    userWhere,
    userLoadOneWhere,
    userLoadManyWhere,
    userOrderBy,
    userPaginate,
    userRequiredRow
> {
    constructor(params: { knex: Knex<any, unknown>; logger: winston.Logger; engine: ClientEngine }) {
        const { knex, logger, engine } = params;
        super({
            tableName: 'users',
            schema: schema as any,
            knex,
            logger,
            engine,
        });
    }
}

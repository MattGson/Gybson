/* Auto generated by relational-schema (https://github.com/MattGson/relational-schema) --- DO NOT MODIFY */

/* eslint-disable */

export default {
    database: 'tests',
    connection: { host: 'localhost', port: 5432, user: 'postgres' },
    generatedAt: '2021-05-11T06:06:59.645Z',
    tables: {
        teams: {
            primaryKey: { constraintName: 'teams_pkey', constraintType: 'PRIMARY KEY', columnNames: ['team_id'] },
            keys: [{ constraintName: 'teams_pkey', constraintType: 'PRIMARY KEY', columnNames: ['team_id'] }],
            uniqueKeyCombinations: [['team_id']],
            relations: [
                {
                    toTable: 'team_members',
                    alias: 'team_members',
                    joins: [{ fromColumn: 'team_id', toColumn: 'team_id' }],
                    constraintName: 'team_members_team_id_foreign',
                    type: 'hasMany',
                },
                {
                    alias: 'team_members_posts',
                    toTable: 'posts',
                    joinTable: 'team_members',
                    joinFrom: {
                        joins: [{ fromColumn: 'team_id', toColumn: 'team_id' }],
                        constraintName: 'team_members_team_id_foreign',
                        toTable: 'team_members',
                    },
                    joinTo: {
                        joins: [{ fromColumn: 'member_post_id', toColumn: 'post_id' }],
                        constraintName: 'team_members_member_post_id_foreign',
                        toTable: 'posts',
                    },
                    type: 'manyToMany',
                },
                {
                    alias: 'users',
                    toTable: 'users',
                    joinTable: 'team_members',
                    joinFrom: {
                        joins: [{ fromColumn: 'team_id', toColumn: 'team_id' }],
                        constraintName: 'team_members_team_id_foreign',
                        toTable: 'team_members',
                    },
                    joinTo: {
                        joins: [{ fromColumn: 'user_id', toColumn: 'user_id' }],
                        constraintName: 'team_members_user_id_foreign',
                        toTable: 'users',
                    },
                    type: 'manyToMany',
                },
            ],
            columns: {
                team_id: {
                    dbType: 'int4',
                    columnDefault: "nextval('teams_team_id_seq'::regclass)",
                    nullable: false,
                    columnName: 'team_id',
                    tsType: 'number',
                },
                name: { dbType: 'varchar', columnDefault: null, nullable: false, columnName: 'name', tsType: 'string' },
                deleted: {
                    dbType: 'bool',
                    columnDefault: 'false',
                    nullable: true,
                    columnName: 'deleted',
                    tsType: 'boolean',
                },
            },
            softDelete: {
                dbType: 'bool',
                columnDefault: 'false',
                nullable: true,
                columnName: 'deleted',
                tsType: 'boolean',
            },
        },
        team_members: {
            primaryKey: {
                constraintName: 'team_members_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['team_id', 'user_id'],
            },
            keys: [
                {
                    constraintName: 'team_members_member_post_id_foreign',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['member_post_id'],
                },
                {
                    constraintName: 'team_members_pkey',
                    constraintType: 'PRIMARY KEY',
                    columnNames: ['team_id', 'user_id'],
                },
                {
                    constraintName: 'team_members_team_id_foreign',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['team_id'],
                },
                {
                    constraintName: 'team_members_user_id_foreign',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['user_id'],
                },
            ],
            uniqueKeyCombinations: [['team_id', 'user_id']],
            relations: [
                {
                    toTable: 'posts',
                    alias: 'member_post',
                    joins: [{ fromColumn: 'member_post_id', toColumn: 'post_id' }],
                    constraintName: 'team_members_member_post_id_foreign',
                    type: 'belongsTo',
                },
                {
                    toTable: 'teams',
                    alias: 'team',
                    joins: [{ fromColumn: 'team_id', toColumn: 'team_id' }],
                    constraintName: 'team_members_team_id_foreign',
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'user',
                    joins: [{ fromColumn: 'user_id', toColumn: 'user_id' }],
                    constraintName: 'team_members_user_id_foreign',
                    type: 'belongsTo',
                },
                {
                    toTable: 'team_members_positions',
                    alias: 'team_members_position',
                    joins: [
                        { fromColumn: 'user_id', toColumn: 'user_id' },
                        { fromColumn: 'team_id', toColumn: 'team_id' },
                    ],
                    constraintName: 'team_members_positions_team_id_user_id_foreign',
                    type: 'hasOne',
                },
            ],
            columns: {
                team_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'team_id',
                    tsType: 'number',
                },
                user_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'user_id',
                    tsType: 'number',
                },
                member_post_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'member_post_id',
                    tsType: 'number',
                },
                deleted: {
                    dbType: 'bool',
                    columnDefault: 'false',
                    nullable: true,
                    columnName: 'deleted',
                    tsType: 'boolean',
                },
            },
            softDelete: {
                dbType: 'bool',
                columnDefault: 'false',
                nullable: true,
                columnName: 'deleted',
                tsType: 'boolean',
            },
        },
        team_members_positions: {
            primaryKey: {
                constraintName: 'team_members_positions_pkey',
                constraintType: 'PRIMARY KEY',
                columnNames: ['team_id', 'user_id'],
            },
            keys: [
                {
                    constraintName: 'team_members_positions_position_manager_unique',
                    constraintType: 'UNIQUE',
                    columnNames: ['manager', 'position'],
                },
                {
                    constraintName: 'team_members_positions_pkey',
                    constraintType: 'PRIMARY KEY',
                    columnNames: ['team_id', 'user_id'],
                },
                {
                    constraintName: 'team_members_positions_team_id_user_id_foreign',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['team_id', 'user_id'],
                },
            ],
            uniqueKeyCombinations: [
                ['manager', 'position'],
                ['team_id', 'user_id'],
            ],
            relations: [
                {
                    toTable: 'team_members',
                    alias: 'team_member',
                    joins: [
                        { fromColumn: 'user_id', toColumn: 'user_id' },
                        { fromColumn: 'team_id', toColumn: 'team_id' },
                    ],
                    constraintName: 'team_members_positions_team_id_user_id_foreign',
                    type: 'hasOne',
                },
            ],
            columns: {
                team_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'team_id',
                    tsType: 'number',
                },
                user_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'user_id',
                    tsType: 'number',
                },
                position: {
                    dbType: 'varchar',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'position',
                    tsType: 'string',
                },
                manager: {
                    dbType: 'varchar',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'manager',
                    tsType: 'string',
                },
                verified: {
                    dbType: 'bool',
                    columnDefault: 'false',
                    nullable: true,
                    columnName: 'verified',
                    tsType: 'boolean',
                },
            },
            softDelete: null,
        },
        users: {
            primaryKey: { constraintName: 'users_pkey', constraintType: 'PRIMARY KEY', columnNames: ['user_id'] },
            keys: [
                {
                    constraintName: 'users_best_friend_id_foreign',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['best_friend_id'],
                },
                { constraintName: 'users_email_unique', constraintType: 'UNIQUE', columnNames: ['email'] },
                { constraintName: 'users_token_unique', constraintType: 'UNIQUE', columnNames: ['token'] },
                { constraintName: 'users_pkey', constraintType: 'PRIMARY KEY', columnNames: ['user_id'] },
            ],
            uniqueKeyCombinations: [['email'], ['token'], ['user_id']],
            relations: [
                {
                    toTable: 'users',
                    alias: 'best_friend',
                    joins: [{ fromColumn: 'best_friend_id', toColumn: 'user_id' }],
                    constraintName: 'users_best_friend_id_foreign',
                    type: 'belongsTo',
                },
                {
                    toTable: 'posts',
                    alias: 'author_posts',
                    joins: [{ fromColumn: 'user_id', toColumn: 'author_id' }],
                    constraintName: 'posts_author_id_foreign',
                    type: 'hasMany',
                },
                {
                    toTable: 'posts',
                    alias: 'co_author_posts',
                    joins: [{ fromColumn: 'user_id', toColumn: 'co_author' }],
                    constraintName: 'posts_co_author_foreign',
                    type: 'hasMany',
                },
                {
                    toTable: 'team_members',
                    alias: 'team_members',
                    joins: [{ fromColumn: 'user_id', toColumn: 'user_id' }],
                    constraintName: 'team_members_user_id_foreign',
                    type: 'hasMany',
                },
                {
                    toTable: 'users',
                    alias: 'users',
                    joins: [{ fromColumn: 'user_id', toColumn: 'best_friend_id' }],
                    constraintName: 'users_best_friend_id_foreign',
                    type: 'hasMany',
                },
                {
                    alias: 'posts_users',
                    toTable: 'users',
                    joinTable: 'posts',
                    joinFrom: {
                        joins: [{ fromColumn: 'user_id', toColumn: 'author_id' }],
                        constraintName: 'posts_author_id_foreign',
                        toTable: 'posts',
                    },
                    joinTo: {
                        joins: [{ fromColumn: 'co_author', toColumn: 'user_id' }],
                        constraintName: 'posts_co_author_foreign',
                        toTable: 'users',
                    },
                    type: 'manyToMany',
                },
                {
                    alias: 'posts_users',
                    toTable: 'users',
                    joinTable: 'posts',
                    joinFrom: {
                        joins: [{ fromColumn: 'user_id', toColumn: 'co_author' }],
                        constraintName: 'posts_co_author_foreign',
                        toTable: 'posts',
                    },
                    joinTo: {
                        joins: [{ fromColumn: 'author_id', toColumn: 'user_id' }],
                        constraintName: 'posts_author_id_foreign',
                        toTable: 'users',
                    },
                    type: 'manyToMany',
                },
                {
                    alias: 'team_members_posts',
                    toTable: 'posts',
                    joinTable: 'team_members',
                    joinFrom: {
                        joins: [{ fromColumn: 'user_id', toColumn: 'user_id' }],
                        constraintName: 'team_members_user_id_foreign',
                        toTable: 'team_members',
                    },
                    joinTo: {
                        joins: [{ fromColumn: 'member_post_id', toColumn: 'post_id' }],
                        constraintName: 'team_members_member_post_id_foreign',
                        toTable: 'posts',
                    },
                    type: 'manyToMany',
                },
                {
                    alias: 'teams',
                    toTable: 'teams',
                    joinTable: 'team_members',
                    joinFrom: {
                        joins: [{ fromColumn: 'user_id', toColumn: 'user_id' }],
                        constraintName: 'team_members_user_id_foreign',
                        toTable: 'team_members',
                    },
                    joinTo: {
                        joins: [{ fromColumn: 'team_id', toColumn: 'team_id' }],
                        constraintName: 'team_members_team_id_foreign',
                        toTable: 'teams',
                    },
                    type: 'manyToMany',
                },
            ],
            columns: {
                user_id: {
                    dbType: 'int4',
                    columnDefault: "nextval('users_user_id_seq'::regclass)",
                    nullable: false,
                    columnName: 'user_id',
                    tsType: 'number',
                },
                best_friend_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'best_friend_id',
                    tsType: 'number',
                },
                email: {
                    dbType: 'varchar',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'email',
                    tsType: 'string',
                },
                first_name: {
                    dbType: 'varchar',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'first_name',
                    tsType: 'string',
                },
                last_name: {
                    dbType: 'varchar',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'last_name',
                    tsType: 'string',
                },
                password: {
                    dbType: 'varchar',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'password',
                    tsType: 'string',
                },
                token: {
                    dbType: 'varchar',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'token',
                    tsType: 'string',
                },
                permissions: {
                    dbType: 'permissions',
                    columnDefault: "'USER'::permissions",
                    nullable: true,
                    columnName: 'permissions',
                    tsType: 'permissions',
                },
                subscription_level: {
                    dbType: 'subscription_level',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'subscription_level',
                    tsType: 'subscription_level',
                },
                deleted_at: {
                    dbType: 'timestamptz',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'deleted_at',
                    tsType: 'Date',
                },
            },
            softDelete: {
                dbType: 'timestamptz',
                columnDefault: null,
                nullable: true,
                columnName: 'deleted_at',
                tsType: 'Date',
            },
            enums: {
                subscription_level: {
                    id: '23402',
                    enumName: 'subscription_level',
                    values: ['BRONZE', 'GOLD', 'SILVER'],
                },
                permissions: { id: '23410', enumName: 'permissions', values: ['ADMIN', 'USER'] },
            },
        },
        posts: {
            primaryKey: { constraintName: 'posts_pkey', constraintType: 'PRIMARY KEY', columnNames: ['post_id'] },
            keys: [
                {
                    constraintName: 'posts_author_id_foreign',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['author_id'],
                },
                {
                    constraintName: 'posts_co_author_foreign',
                    constraintType: 'FOREIGN KEY',
                    columnNames: ['co_author'],
                },
                { constraintName: 'posts_pkey', constraintType: 'PRIMARY KEY', columnNames: ['post_id'] },
            ],
            uniqueKeyCombinations: [['post_id']],
            relations: [
                {
                    toTable: 'users',
                    alias: 'author_relation',
                    joins: [{ fromColumn: 'author_id', toColumn: 'user_id' }],
                    constraintName: 'posts_author_id_foreign',
                    type: 'belongsTo',
                },
                {
                    toTable: 'users',
                    alias: 'co_author_relation',
                    joins: [{ fromColumn: 'co_author', toColumn: 'user_id' }],
                    constraintName: 'posts_co_author_foreign',
                    type: 'belongsTo',
                },
                {
                    toTable: 'team_members',
                    alias: 'team_members',
                    joins: [{ fromColumn: 'post_id', toColumn: 'member_post_id' }],
                    constraintName: 'team_members_member_post_id_foreign',
                    type: 'hasMany',
                },
                {
                    alias: 'teams',
                    toTable: 'teams',
                    joinTable: 'team_members',
                    joinFrom: {
                        joins: [{ fromColumn: 'post_id', toColumn: 'member_post_id' }],
                        constraintName: 'team_members_member_post_id_foreign',
                        toTable: 'team_members',
                    },
                    joinTo: {
                        joins: [{ fromColumn: 'team_id', toColumn: 'team_id' }],
                        constraintName: 'team_members_team_id_foreign',
                        toTable: 'teams',
                    },
                    type: 'manyToMany',
                },
                {
                    alias: 'users',
                    toTable: 'users',
                    joinTable: 'team_members',
                    joinFrom: {
                        joins: [{ fromColumn: 'post_id', toColumn: 'member_post_id' }],
                        constraintName: 'team_members_member_post_id_foreign',
                        toTable: 'team_members',
                    },
                    joinTo: {
                        joins: [{ fromColumn: 'user_id', toColumn: 'user_id' }],
                        constraintName: 'team_members_user_id_foreign',
                        toTable: 'users',
                    },
                    type: 'manyToMany',
                },
            ],
            columns: {
                post_id: {
                    dbType: 'int4',
                    columnDefault: "nextval('posts_post_id_seq'::regclass)",
                    nullable: false,
                    columnName: 'post_id',
                    tsType: 'number',
                },
                author: {
                    dbType: 'varchar',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'author',
                    tsType: 'string',
                },
                author_id: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'author_id',
                    tsType: 'number',
                },
                co_author: {
                    dbType: 'int4',
                    columnDefault: null,
                    nullable: true,
                    columnName: 'co_author',
                    tsType: 'number',
                },
                message: {
                    dbType: 'varchar',
                    columnDefault: null,
                    nullable: false,
                    columnName: 'message',
                    tsType: 'string',
                },
                rating_average: {
                    dbType: 'float4',
                    columnDefault: "'0'::real",
                    nullable: true,
                    columnName: 'rating_average',
                    tsType: 'number',
                },
                created: {
                    dbType: 'timestamptz',
                    columnDefault: 'CURRENT_TIMESTAMP',
                    nullable: true,
                    columnName: 'created',
                    tsType: 'Date',
                },
                deleted: {
                    dbType: 'bool',
                    columnDefault: 'false',
                    nullable: true,
                    columnName: 'deleted',
                    tsType: 'boolean',
                },
            },
            softDelete: {
                dbType: 'bool',
                columnDefault: 'false',
                nullable: true,
                columnName: 'deleted',
                tsType: 'boolean',
            },
        },
    },
};

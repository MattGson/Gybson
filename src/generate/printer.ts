import _ from 'lodash';
import fs from 'fs-extra';
import { join } from 'path';

// @ts-ignore
import { format as prettify } from 'prettier';
import { prettierDefault } from './config';

export const PascalCase = (name: string): string => {
    return _.upperFirst(_.camelCase(name));
};

function getPrettierConfig(file?: string) {
    let config: any;
    if (file?.endsWith('.js')) {
        config = require(file);
    }
    if (file?.endsWith('.json') || file?.endsWith('rc')) {
        config = fs.readJSONSync(file);
    }

    if (config) {
        console.log('Using custom prettier config from file ', file);
        return config;
    }
    console.log('Using default prettier config');
    return prettierDefault;
}

export async function writeFormattedFile(args: {
    filename: string;
    directory: string;
    content: string;
    prettierConfig?: string;
}): Promise<void> {
    const { filename, directory, content, prettierConfig } = args;

    let fileHeader = `
         /* Auto generated by relational-schema (https://github.com/MattGson/relational-schema) --- DO NOT MODIFY */
        
        /* eslint-disable */
    `;

    const extension = 'ts';
    const parser = 'typescript';

    const out = join(directory, filename + '.' + extension);

    // append creates files if they don't exist - write overwrites contents
    await fs.appendFile(out, '');
    // await fs.writeFile(out, content);
    await fs.writeFile(out, prettify(fileHeader + content, { parser, ...getPrettierConfig(prettierConfig) }));
}

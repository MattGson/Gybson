import { typescriptOfSchema } from '../Schemats';

export class TypeBuilder {
    private tables: string[];
    private connectionString: string;
    public constructor(connectionString: string, tables: string[]) {
        this.tables = tables;
        this.connectionString = connectionString;
    }

    public async generateRowTypes(): Promise<string> {
        const contents = await typescriptOfSchema(this.connectionString, this.tables, null, {
            writeHeader: false,
            camelCase: false,
        });
        const result = `
        /* Auto generated by TypeBuilder.ts DO NOT MODIFY */
        
        /* eslint @typescript-eslint/no-namespace: 0 */
        /* eslint  @typescript-eslint/class-name-casing: 0 */
        
        ${contents}
        `;

        // TODO:- bit of a hack to remove reserved type 'symbol' for now
        return result.replace('type symbol = string | null;', '').replace('symbol: unitsFields.symbol;', '');
    }

    public async generateTableTypes(): Promise<string> {
        const tableRows = this.tables.reduce((result: string[], tbl) => {
            // return result.concat(`${_.camelCase(tbl)}: dbt.${_.upperFirst(_.camelCase(tbl))};`);
            return result.concat(`${tbl}: dbt.${tbl};`);
        }, []);

        // write tables

        return `
      /* Auto generated by TypeBuilder.ts DO NOT MODIFY */
      /* eslint @typescript-eslint/no-namespace: 0 */
      /* eslint  @typescript-eslint/class-name-casing: 0 */

      import * as dbt from './db-schema';

      export interface DBTables {
        ${tableRows.join('\n')}
      }

      export type DBTableName = Extract<keyof DBTables, string>;
    `;
    }
}
